/*------------------------------------*\
    Mixins
\*------------------------------------*/

// Baseline-guide for vertical rhythm
@mixin baseline-guide() {
    @include background(linear-gradient(#FF6BA6 1px, transparent 1px));
    background-size: 100% .75; // 12px grid
}

// REM values
// Adapted from http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@mixin rem( $property, $values )
{
    $px: ();
    $rem: ();
    
    @each $value in $values
    {
        @if $value == 0 or $value == auto
        {
            $px : append( $px , $value );
            $rem: append( $rem, $value );
        }
        @else
        {
            $unit: unit( $value );
            $val: parseInt( $value );
            
            // enforce pixels on unitless measurements
            @if $unit == ""
            {
                $value: $value + 0px;
                $unit: "px";
            }
            
            // assume pixels
            @if $unit == "px"
            {
                $px : append( $px,  $value );
                $rem: append( $rem, ( $val / $font-size-default + rem ) );
            }
            
            @if $unit == "rem"
            {
                $px : append( $px,  ( $val * $font-size-default + px ) );
                $rem: append( $rem, $value );
            }
        }
    }
    
    @if $px == $rem
    {
        #{$property}: $px;
    }
    @else
    {
        #{$property}: $px;
        #{$property}: $rem;
    }
}

// Experimental Block Constructor
@mixin experimental-block ( $pre: "", $post: "" )
{
	$pre: unquote( $pre );
	$post: unquote( $post );
	#{$pre}-webkit-#{$post} {
	    @content;
	}
	#{$pre}-khtml-#{$post} {
	    @content;
	}
	#{$pre}-moz-#{$post} {
	    @content;
	}
	#{$pre}-ms-#{$post} {
	    @content;
	}
	#{$pre}-o-#{$post} {
	    @content;
	}
	#{$pre}#{$post} {
		@content;
	}
}


// Inline separator
@mixin inline-separator( $char: "|" ) {
	&::before {
		content: "#{$char}";
		padding: 0 .5em 0 .25em;
	}
}

// Background-images
@mixin background-image ( $img_base, $img_path, $hide_text: true ) {
	
    background: transparent url(#{$css_images}/#{$img_base}.png) center center no-repeat;
    background-size: contain;
	
	@if $hide_text
	{
    	@include breakup-placeholder( overflow-hide );
	}
    
	// SVG shim in JS for Android 2.3
	html.with-svg & {
	    background-image: url(#{$css_images}/#{$img_base}.svg);
	}
}

// Triangle
@mixin triangle( $size: ( "base": 10, "length": 10 ), $direction: right, $color: #000 )
{
    $base: map-get( $size, "base" ) / 2;
    $length: map-get( $size, "length" );
    
    width: 0;
    height: 0;
    border: 0px solid transparent;
    
    // Right
    @if $direction == right
    {
        border-width: ( 0px + $base ) 0 ( 0px + $base ) ( 0px + $length );
        border-width: ( 0rem + $base / $font-size-default ) 0 ( 0rem + $base / $font-size-default ) ( 0rem + $length / $font-size-default );
        border-left-color: $color;
    }
    // Left
    @elseif $direction == left
    {
        border-width: ( 0px + $base ) ( 0px + $length ) ( 0px + $base ) 0;
        border-width: ( 0rem + $base / $font-size-default ) ( 0rem + $length / $font-size-default ) ( 0rem + $base / $font-size-default ) 0;
        border-right-color: $color;
    }
    // Up
    @elseif $direction == up
    {
        border-width: 0 ( 0px + $base ) ( 0px + $length ) ( 0px + $base );
        border-width: 0 ( 0rem + $base / $font-size-default ) ( 0rem + $length / $font-size-default ) ( 0rem + $base / $font-size-default );
        border-bottom-color: $color;
    }
    // Down
    @elseif $direction == down
    {
        border-width: ( 0px + $length ) ( 0px + $base ) 0 ( 0px + $base );
        border-width: ( 0rem + $length / $font-size-default ) ( 0rem + $base / $font-size-default ) 0 ( 0rem + $base / $font-size-default ) ;
        border-top-color: $color;
    }
}


// Font Feature Settings
@mixin font-feature-settings( $settings )
{
    @include experimental( font-feature-settings, $settings,
         -moz, -webkit, official
    );
}

@mixin nicer-font-display {
    @include experimental( font-smoothing, antialiased,
         -moz, -webkit, not -o, -ms, not -khtml, official
    );
    // Just for FF Mac
    -moz-osx-font-smoothing: grayscale;
}


@mixin moz {
    @-moz-document url-prefix() {
        @content;
    }
}

// // make a list into navigation
// @mixin nav {
// 	@include delist;
// 	a, a:link, a:visited, a:focus, a:hover {
// 		text-decoration: none;
// 	}
// }
// 
// // Mobile Navigation
// @mixin mobile-nav ( $h-padding: 1em, $v-padding: .5em ) {
// 	@include nav;
// 	li {
// 		border-style: solid;
// 		border-top-width: 1px;
// 	}
// 	a {
// 		display: block;
// 		padding: $v-padding $h-padding;
// 	}
// }
// 
// @mixin position-from-center ( $offset: 0, $side: left, $top: 0 ) {
// 	position: absolute;
// 	#{$side}: 50%;
// 	top: $top;
// 	margin-#{$side}: $offset;
// }
// 
// @mixin circle ( $diameter: 24px, $display: inline-block ) {
// 	$radius: $diameter / 2;
//     @include border-radius( $radius );
// 	@if $display == inline-block {
// 		@include inline-block;
// 	} @else {
// 	    display: $display;
// 	}
//     height: $diameter;
//     line-height: $diameter;
//     width: $diameter;
// }
// 
// // image replacement for images
// @mixin iIR ( $image, $bg-position: center top ) {
// 	background: url(#{$image_path}/#{$image}) $bg-position no-repeat;
// 	@include background-size( 100% );
// 	display: block;
// 	height: 0;
// 	padding-top: image-height( $image );
// 	overflow: hidden;
// 	width: image-width( $image );
// 	
// }
// 
// // create a back shadow that lets the text stand out
// @mixin back-shadow {
// 	@include text-shadow( 0 0 30px #000, 0 0 30px #000 );
// }
// 
// // simplify hi-res CSS additions
// @mixin hires() {
//   	@media
// 		only screen and (min--moz-device-pixel-ratio: 1.5),
// 		only screen and (-ms-min-device-pixel-ratio: 1.5),
// 		only screen and (-o-min-device-pixel-ratio: 3/2),
// 		only screen and (-webkit-min-device-pixel-ratio: 1.5),
// 		only screen and (min-device-pixel-ratio: 1.5),
// 		only screen and (resolution: 300dpi)
// 	{
// 		@content;
// 	}
// }
// 
// // create a navigation icon
// @mixin nav-icon {
// 	background: center center no-repeat;
// 	content: ".";
// 	overflow: hidden;
// 	display: inline-block;
// 	height: 0;
// 	margin-right: .2em;
// 	position: relative;
// 	top: 3px;
// }
// 
// @mixin element-focusable {
//   @include element-invisible;
//   &:active,
//   &:focus {
//     @include element-invisible-off;
//   }
// }
// 
// // Experimental Block Constructor
// @mixin experimental-block ( $pre: "", $post: "" ) {
// 	$pre: unquote( $pre );
// 	$post: unquote( $post );
// 	#{$pre}-webkit-#{$post},
// 	#{$pre}-khtml-#{$post},
// 	#{$pre}-moz-#{$post},
// 	#{$pre}-ms-#{$post},
// 	#{$pre}-o-#{$post},
// 	#{$pre}#{$post} {
// 		@content;
// 	}
// }
// 
// // Text overflow
// @mixin text-overflow( $overflow-type: clip )
// {
// 	@include experimental(text-overflow, unquote($overflow-type),
// 	    -moz, -webkit, -o, -ms, -khtml, official
// 	);
// }
// 
// // Set the background size to the size of sprite
// @mixin sprite-map-background-size( $map, $ratio: 1 )
// {
// 	background-size: ( image-width( sprite-url( $map, true ) ) * $ratio ) ( image-height( sprite-url( $map, true ) ) * $ratio );
// }
// 
// // Compass’ flexbox implementation does not yet support inline-box
// // Pull request: https://github.com/chriseppstein/compass/pull/978
// @mixin display-box( $box-style: box ) {
//   // box is default
//   @if $box-style != inline-box
//   {
//     $box-style: box;
//   }
//   @include experimental-value(display, $box-style,
//     -moz, -webkit, not -o, -ms, not -khtml, official
//   );
// }
// 
// // Compass’ column handling isn’t updated yet
// // Pull request: https://github.com/chriseppstein/compass/pull/930
// @mixin column-rule-width($width) {
//   @include experimental(column-rule-width, $width,
//     -moz, -webkit, -o, -ms, not -khtml, official
//   );
// }
// @mixin column-rule-style($style) {
//   @include experimental(column-rule-style, unquote($style),
//     -moz, -webkit, -o, -ms, not -khtml, official
//   );
// }
// @mixin column-rule-color($color) {
//   @include experimental(column-rule-color, $color,
//     -moz, -webkit, -o, -ms, not -khtml, official
//   );
// }
// // Missing from the public compass release
// @mixin column-break-inside($value: auto){
//    @include experimental(column-break-inside, $value, not -moz, -webkit, not -o, not -ms, not -khtml, official );
// }
// @mixin column-break($type: before, $value: auto){
//    @include experimental("column-break-#{$type}", $value, not -moz, -webkit, not -o, not -ms, not -khtml, official );
// }